AWSTemplateFormatVersion: 2010-09-09
Parameters:
  DBInstanceID:
    Default: DASDD-db-1
    Description: First DASDD db database instance
    Type: String
    MinLength: '1'
    MaxLength: '63'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9-]*'
    ConstraintDescription: >-
      Must begin with a letter and must not end with a hyphen or contain two
      consecutive hyphens.
  DBName:
    Default: AdDB
    Description: Relational database to store collected Ad data.
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.
  DBInstanceClass:
    Default: db.t2.micro
    AllowedValues: [ db.t1.micro, db.m1.small, db.m1.medium, db.m1.large, db.m1.xlarge,
                     db.m2.xlarge, db.m2.2xlarge, db.m2.4xlarge, db.m3.medium, db.m3.large, db.m3.xlarge,
                     db.m3.2xlarge, db.m4.large, db.m4.xlarge, db.m4.2xlarge, db.m4.4xlarge, db.m4.10xlarge,
                     db.r3.large, db.r3.xlarge, db.r3.2xlarge, db.r3.4xlarge, db.r3.8xlarge, db.m2.xlarge,
                     db.m2.2xlarge, db.m2.4xlarge, db.cr1.8xlarge, db.t2.micro, db.t2.small, db.t2.medium,
                     db.t2.large ]
    Description: DB instance class
    Type: String
    ConstraintDescription: Must select a valid DB instance type.
  DBConnectionLocation:
    Description: The IP address range that can be used to connect to the DB instance
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  DBAllocatedStorage:
    Default: '20'
    Description: The size of the database (GiB)
    Type: Number
    MinValue: '20'
    MaxValue: '65536'
    ConstraintDescription: must be between 20 and 65536Gb.
  DBUsername:
    NoEcho: 'true'
    Description: The database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    NoEcho: 'true'
    Description: The database admin account password
    Type: String
    MinLength: '8'
    MaxLength: '41'
#    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  BotServerKPName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  BotServerSSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instance
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  BotServerInstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [ t1.micro, t2.nano, t2.micro, t2.small, t2.medium, t2.large, t3.micro,
                     t3.small, t3.medium, t3.large, t3a.micro, t3a.small, t3a.medium, t3a.large,
                     m1.small, m1.medium, m1.large, m1.xlarge, m2.xlarge, m2.2xlarge,
                     m2.4xlarge, m3.medium, m3.large, m3.xlarge, m3.2xlarge, m4.large,
                     m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge, c1.medium, c1.xlarge,
                     c3.large, c3.xlarge, c3.2xlarge, c3.4xlarge, c3.8xlarge, c4.large,
                     c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, g2.2xlarge, g2.8xlarge,
                     r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge, r3.8xlarge, i2.xlarge,
                     i2.2xlarge, i2.4xlarge, i2.8xlarge, d2.xlarge, d2.2xlarge, d2.4xlarge,
                     d2.8xlarge, hi1.4xlarge, hs1.8xlarge, cr1.8xlarge, cc2.8xlarge, cg1.4xlarge ]
  BotServerAMI:
    Description: Managed AMI ID for EC2 Instance
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/canonical/ubuntu/server/focal/stable/current/amd64/hvm/ebs-gp2/ami-id
  BotServerTagKey:
    Type: String
    Default: 'Name'
  BotServerTagValue:
    Type: String
    Default: 'DASDD Ubuntu Bot Server'

Resources:
  DASDDAdDBSecurityGroup: # VPC Security Group to allow connections to the db instance
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open DASDD db for access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: !Ref DBConnectionLocation
  DASDDAdImages: # S3 Bucket for storing ad thumbnails and images
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private  # Todo: flip to "PublicRead"
    DeletionPolicy: Retain
  DASDDAdDB: # RDS Postgres instance for storing bot and ad data
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceID
      DBName: !Ref DBName
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: !Ref DBAllocatedStorage
      Engine: postgres
      EngineVersion: 12.6
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      VPCSecurityGroups: [ !GetAtt DASDDAdDBSecurityGroup.GroupId ]
    DeletionPolicy: Snapshot
  DASDDBotServerInstanceProfileRole:
    Type: AWS::IAM::Role
    Properties:
      Description: 'Role attached to the Instance Profile'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: 'ec2.amazonaws.com'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy
  DASDDBotServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref DASDDBotServerInstanceProfileRole
  DASDDBotServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref BotServerSSHLocation
  DASDDBotServer:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref BotServerInstanceType
      ImageId: !Ref BotServerAMI
      KeyName: !Ref BotServerKPName
      SecurityGroups:
        - !Ref DASDDBotServerSG
      IamInstanceProfile: !Ref DASDDBotServerInstanceProfile
      Tags:
        - Key: !Ref BotServerTagKey
          Value: !Ref BotServerTagValue
      UserData: # Install cfn bootstrap and invoke cfn-init
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          mkdir -p /opt/aws/bin
          wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          python3 -m easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-py3-latest.tar.gz

          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource DASDDBotServer --region ${AWS::Region}
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            apt:
              ruby-full: [ ]
          files:
            /home/ubuntu/install: # Download CodeDeploy agent
              source: !Sub "https://aws-codedeploy-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/latest/install"
              mode: "000755"
          commands:
            00-install-agent:
              command: "./install auto"
              cwd: "/home/ubuntu/"
            01-cfn-signal: # Send success signal to CF
              command: !Sub "/opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource DASDDBotServer --region ${AWS::Region}"
    CreationPolicy:
      ResourceSignal:
        Count: 1
  CDServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Description: 'Service role for CodeDeploy'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: 'codedeploy.amazonaws.com'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
  CDBotServerApp:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: 'CDBotServerApp'
      ComputePlatform: Server
  CDBotServerAppDepGrp:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CDBotServerApp
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      DeploymentGroupName: 'CDBotServerAppDepGrp'
      DeploymentStyle:
        DeploymentType: IN_PLACE
        DeploymentOption: WITHOUT_TRAFFIC_CONTROL
      Ec2TagFilters:
        - Key: !Ref BotServerTagKey
          Value: !Ref BotServerTagValue
          Type: KEY_AND_VALUE
      ServiceRoleArn: !GetAtt CDServiceRole.Arn
